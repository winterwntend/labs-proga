#include <iostream>
#include <vector>
using namespace std;

// === Абстрактный класс "Точка" ===
class Точка {
public:
    virtual void изобразить() = 0;  // Чисто виртуальная функция
    virtual void убрать() { cout << "Убираю точку\n"; }
    virtual void передвинуть(int dx, int dy) {
        cout << "Передвигаю точку на (" << dx << ", " << dy << ")\n";
    }
    virtual ~Точка() {}  // Виртуальный деструктор
};

// === Класс "Линия" ===
class Линия : public Точка {
public:
    void изобразить() override {
        cout << "Изображаю линию\n";
    }

    void убрать() override {
        cout << "Убираю линию\n";
    }
};

// === Базовый класс "Квадрат" с виртуальным наследованием ===
class Квадрат : public virtual Точка {
public:
    void изобразить() override {
        cout << "Изображаю квадрат\n";
    }

    void убрать() override {
        cout << "Убираю квадрат\n";
    }

    virtual void повернуть(int angle) {  // <-- Теперь виртуальный!
        cout << "Поворачиваю квадрат на " << angle << " градусов\n";
    }
};

// === Класс "Прямоугольник" ===
class Прямоугольник : public Квадрат {
public:
    void изобразить() override {
        cout << "Изображаю прямоугольник\n";
    }

    void передвинуть(int dx, int dy) override {
        cout << "Передвигаю прямоугольник на (" << dx << ", " << dy << ")\n";
    }
};

// === Класс "Параллелограмм" (виртуальное наследование) ===
class Параллелограмм : public virtual Квадрат {
public:
    void изобразить() override {
        cout << "Изображаю параллелограмм\n";
    }

    void повернуть(int angle) override {  // Теперь корректно!
        cout << "Поворачиваю параллелограмм на " << angle << " градусов\n";
    }
};

// === Класс "Ромб" ===
class Ромб : public Параллелограмм {
public:
    void изобразить() override {
        cout << "Изображаю ромб\n";
    }
};

// === Основная функция ===
int main() {
    setlocale(LC_ALL, "Russian");

    vector<Точка*> фигуры;

    фигуры.push_back(new Линия());
    фигуры.push_back(new Прямоугольник());
    фигуры.push_back(new Параллелограмм());
    фигуры.push_back(new Ромб());

    cout << "=== Рисуем все фигуры ===\n";
    for (auto f : фигуры) {
        f->изобразить();  // Позднее связывание!
    }

    cout << "\n=== Убираем все фигуры ===\n";
    for (auto f : фигуры) {
        f->убрать();
    }

    cout << "\n=== Передвигаем фигуры ===\n";
    фигуры[1]->передвинуть(10, 20);  // Прямоугольник
    фигуры[2]->передвинуть(5, 5);    // Параллелограмм

    cout << "\n=== Поворачиваем фигуры ===\n";
    if (auto p = dynamic_cast<Квадрат*>(фигуры[2])) {
        p->повернуть(45);
    }
    if (auto r = dynamic_cast<Квадрат*>(фигуры[3])) {
        r->повернуть(90);
    }

    // Очистка памяти
    for (auto f : фигуры)
        delete f;

    return 0;
}
